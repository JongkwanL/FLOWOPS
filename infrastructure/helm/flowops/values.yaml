# FlowOps MLOps Platform Configuration

# Global settings
global:
  imageRegistry: "ghcr.io"
  imagePullSecrets: []
  storageClass: "gp3"
  
# Application configuration
app:
  name: flowops
  version: "1.0.0"
  
# Model serving configuration
modelServing:
  enabled: true
  replicaCount: 3
  image:
    repository: flowops/mlops-model
    tag: "latest-serving"
    pullPolicy: IfNotPresent
  
  # Service configuration
  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8000"
      prometheus.io/path: "/metrics"
  
  # Ingress configuration
  ingress:
    enabled: true
    className: "alb"
    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/healthcheck-path: /health
      alb.ingress.kubernetes.io/ssl-redirect: '443'
    hosts:
      - host: api.flowops.io
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: flowops-tls
        hosts:
          - api.flowops.io
  
  # Resource configuration
  resources:
    limits:
      memory: "4Gi"
      cpu: "2000m"
      nvidia.com/gpu: "0"  # Set to 1 for GPU workloads
    requests:
      memory: "1Gi"
      cpu: "500m"
  
  # Auto-scaling
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
        - type: Percent
          value: 50
          periodSeconds: 60
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
        - type: Percent
          value: 100
          periodSeconds: 30
  
  # Pod disruption budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
  
  # Environment variables
  env:
    - name: MODEL_NAME
      value: "flowops-model"
    - name: MODEL_STAGE
      value: "Production"
    - name: LOG_LEVEL
      value: "INFO"
    - name: MLFLOW_TRACKING_URI
      valueFrom:
        secretKeyRef:
          name: mlflow-secrets
          key: tracking_uri
  
  # Health checks
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
  
  # Node selection
  nodeSelector:
    kubernetes.io/arch: amd64
  
  tolerations: []
  
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - flowops
          topologyKey: kubernetes.io/hostname

# GPU model serving (separate deployment for GPU workloads)
gpuModelServing:
  enabled: false
  replicaCount: 1
  image:
    repository: flowops/mlops-model
    tag: "latest-serving"
    pullPolicy: IfNotPresent
  
  resources:
    limits:
      memory: "8Gi"
      cpu: "4000m"
      nvidia.com/gpu: "1"
    requests:
      memory: "4Gi"
      cpu: "2000m"
  
  nodeSelector:
    nvidia.com/gpu: "true"
  
  tolerations:
    - key: nvidia.com/gpu
      operator: Equal
      value: "true"
      effect: NoSchedule

# MLflow configuration
mlflow:
  enabled: true
  
  # MLflow tracking server
  trackingServer:
    image:
      repository: flowops/mlflow
      tag: "2.10.0"
    
    replicaCount: 2
    
    service:
      type: ClusterIP
      port: 5000
    
    resources:
      limits:
        memory: "2Gi"
        cpu: "1000m"
      requests:
        memory: "1Gi"
        cpu: "500m"
    
    # Persistence for local artifacts (use S3 in production)
    persistence:
      enabled: true
      storageClass: "gp3"
      size: 100Gi
    
    # Database configuration
    database:
      type: postgresql
      host: "flowops-postgresql"
      port: 5432
      name: mlflow
      username: mlflow
      passwordSecret: mlflow-db-secret
      passwordKey: password
    
    # S3 configuration for artifacts
    s3:
      enabled: true
      bucket: "flowops-mlflow-artifacts"
      region: "us-west-2"
    
    env:
      - name: MLFLOW_S3_ENDPOINT_URL
        value: ""
      - name: AWS_DEFAULT_REGION
        value: "us-west-2"

# PostgreSQL configuration (for MLflow backend store)
postgresql:
  enabled: true
  auth:
    postgresPassword: "ChangeMeInProduction123!"
    username: mlflow
    password: "ChangeMeInProduction123!"
    database: mlflow
  
  primary:
    persistence:
      enabled: true
      storageClass: "gp3"
      size: 100Gi
    
    resources:
      limits:
        memory: "2Gi"
        cpu: "1000m"
      requests:
        memory: "1Gi"
        cpu: "500m"

# Monitoring configuration
monitoring:
  enabled: true
  
  # Prometheus
  prometheus:
    enabled: true
    server:
      retention: "30d"
      
      persistentVolume:
        enabled: true
        storageClass: "gp3"
        size: 100Gi
      
      resources:
        limits:
          memory: "4Gi"
          cpu: "2000m"
        requests:
          memory: "2Gi"
          cpu: "1000m"
    
    # Alert manager
    alertmanager:
      enabled: true
      persistentVolume:
        enabled: true
        storageClass: "gp3"
        size: 10Gi
  
  # Grafana
  grafana:
    enabled: true
    
    admin:
      existingSecret: grafana-secret
      userKey: admin-user
      passwordKey: admin-password
    
    persistence:
      enabled: true
      storageClassName: "gp3"
      size: 10Gi
    
    resources:
      limits:
        memory: "1Gi"
        cpu: "500m"
      requests:
        memory: "512Mi"
        cpu: "250m"
    
    # Default dashboards
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
    
    dashboards:
      default:
        mlops-overview:
          gnetId: 15760
          revision: 1
          datasource: Prometheus
        kubernetes-cluster:
          gnetId: 7249
          revision: 1
          datasource: Prometheus
        model-performance:
          file: dashboards/model-performance.json

# Argo Rollouts for progressive delivery
argoRollouts:
  enabled: true
  
  controller:
    replicas: 2
    
    resources:
      limits:
        memory: "512Mi"
        cpu: "500m"
      requests:
        memory: "256Mi"
        cpu: "250m"
  
  # Dashboard
  dashboard:
    enabled: true
    readonly: false

# External Secrets Operator
externalSecrets:
  enabled: true
  
  # AWS Secrets Manager integration
  secretStore:
    aws:
      region: "us-west-2"
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-sa

# Service Account configurations
serviceAccount:
  # Model serving service account
  modelServing:
    create: true
    annotations:
      eks.amazonaws.com/role-arn: ""  # Set via Terraform
    name: model-serving-sa
  
  # MLflow service account
  mlflow:
    create: true
    annotations:
      eks.amazonaws.com/role-arn: ""  # Set via Terraform
    name: mlflow-sa

# Network Policies (for enhanced security)
networkPolicies:
  enabled: true
  
  # Default deny all ingress
  defaultDenyIngress: true
  
  # Allow ingress from same namespace
  allowSameNamespace: true
  
  # Allow ingress from monitoring namespace
  allowMonitoring: true

# Pod Security Standards
podSecurityStandards:
  enabled: true
  enforce: "restricted"
  audit: "restricted"
  warn: "restricted"

# Secrets
secrets:
  # MLflow database password
  mlflowDb:
    name: mlflow-db-secret
    data:
      password: "ChangeMeInProduction123!"
  
  # Grafana admin credentials
  grafana:
    name: grafana-secret
    data:
      admin-user: "admin"
      admin-password: "ChangeMeInProduction123!"

# ConfigMaps
configMaps:
  # Model serving configuration
  modelConfig:
    name: model-config
    data:
      model_name: "flowops-model"
      model_stage: "Production"
      cache_enabled: "true"
      cache_ttl: "300"

# Jobs for initialization
jobs:
  # Database migration job
  dbMigration:
    enabled: true
    image:
      repository: flowops/mlflow
      tag: "2.10.0"
    
    # Run database setup/migration
    command:
      - "/bin/sh"
      - "-c"
      - |
        mlflow db upgrade $MLFLOW_BACKEND_STORE_URI
    
    env:
      - name: MLFLOW_BACKEND_STORE_URI
        value: "postgresql://mlflow:$(POSTGRES_PASSWORD)@flowops-postgresql:5432/mlflow"
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: mlflow-db-secret
            key: password